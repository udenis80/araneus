from filestorage import (
    AsyncStorageHandlerBase as AsyncStorageHandlerBase,
    FileItem as FileItem,
    StorageHandlerBase as StorageHandlerBase,
    utils as utils,
)
from filestorage.exceptions import (
    FilestorageConfigError as FilestorageConfigError,
)
from typing import Any, Optional

class LocalFileHandler(StorageHandlerBase):
    async_ok: bool = ...
    chunk_size: Any = ...
    base_path: Any = ...
    auto_make_dir: Any = ...
    def __init__(
        self, base_path: Any, auto_make_dir: bool = ..., **kwargs: Any
    ) -> None: ...
    def local_path(self, item: FileItem) -> str: ...
    def make_dir(self, item: Optional[FileItem] = ...) -> Any: ...
    def validate(self) -> None: ...
    def resolve_filename(self, item: FileItem) -> FileItem: ...

def os_wrap(fn: utils.SyncCallable) -> utils.AsyncCallable: ...
def disabled_method(*args: Any, **kwargs: Any) -> None: ...

class AsyncLocalFileHandler(LocalFileHandler, AsyncStorageHandlerBase):
    async def async_make_dir(self, item: Optional[FileItem] = ...) -> Any: ...
    allow_sync_methods: bool = ...
    def validate(self) -> None: ...
    async def async_resolve_filename(self, item: FileItem) -> FileItem: ...
