from . import utils as utils
from typing import Any, BinaryIO, NamedTuple, Optional, Tuple

class SyncReader:
    data: Any = ...
    filename: Any = ...
    def __init__(self, item: FileItem) -> None: ...
    def seek(self, offset: int, whence: int = ...) -> int: ...
    def read(self, size: int = ...) -> bytes: ...
    closed: bool = ...

class AsyncReader:
    data: Any = ...
    filename: Any = ...
    def __init__(self, item: FileItem) -> None: ...
    async def seek(self, offset: int, whence: int = ...) -> int: ...
    async def read(self, size: int = ...) -> bytes: ...
    closed: bool = ...

class FileItem(NamedTuple):
    filename: str
    path: Tuple[str, ...] = ...
    data: Optional[BinaryIO] = ...
    media_type: Optional[str] = ...
    def copy(self, **kwargs: Any) -> FileItem: ...
    @property
    def has_data(self) -> bool: ...
    @property
    def url_path(self) -> str: ...
    @property
    def fs_path(self) -> str: ...
    @property
    def content_type(self) -> Optional[str]: ...
    def __enter__(self): ...
    def __exit__(*args: Any, **kwargs: Any) -> None: ...
    async def __aenter__(self): ...
    async def __aexit__(*args: Any, **kwargs: Any) -> None: ...
